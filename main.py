# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Me0G-26TCH0xQKPJqqqn_fvOjSTNHxHu
"""

def forward_tracing_path_sensitization(circuit, fault_node, fault_type):
    test_vectors = []
    sensitized = set()

    def propagate_sensitization(node):
        # Mark the node as sensitized
        sensitized.add(node)

        # If the node is a primary input, generate a test vector
        if node in circuit['inputs']:
            test_vector = {input_node: '1' if input_node == node else '0' for input_node in circuit['inputs']}
            test_vectors.append(test_vector)

        # If the node is a gate, propagate sensitization to fanout nodes
        if node in circuit['gates']:
            gate = circuit['gates'][node]
            input_nodes = gate['inputs']

            # Determine input sensitization values based on the gate type
            input_sensitization = []
            if gate['type'] == 'AND':
                input_sensitization = ['1'] * len(input_nodes)
            elif gate['type'] == 'OR':
                input_sensitization = ['0'] * len(input_nodes)
            elif gate['type'] == 'NOT':
                input_sensitization = ['0'] if circuit[input_nodes[0]] == '1' else ['1']

            # Propagate sensitization to fanout nodes
            for fanout_node in gate['outputs']:
                if fanout_node not in sensitized:
                    propagate_sensitization(fanout_node)

    # Set the fault node to the specified fault type
    circuit[fault_node] = fault_type

    # Perform forward tracing path sensitization starting from the fault node
    propagate_sensitization(fault_node)

    return test_vectors